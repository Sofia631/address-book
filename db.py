import sqlite3

conn = sqlite3.connect("contacts.db")
cursor = conn.cursor()

cursor.execute('''
    CREATE TABLE IF NOT EXISTS users (
        users_id INTEGER PRIMARY KEY AUTOINCREMENT,
        username TEXT UNIQUE NOT NULL,
        password TEXT NOT NULL
    )
''')

cursor.execute('''
    CREATE TABLE IF NOT EXISTS contacts (
        contacts_id INTEGER PRIMARY KEY AUTOINCREMENT,
        user_id INTEGER NOT NULL,
        fname TEXT NOT NULL,
        lname TEXT NOT NULL,
        phone TEXT NOT NULL,
        patronymic TEXT DEFAULT NULL,
        address TEXT DEFAULT NULL,
        photo TEXT DEFAULT NULL,
        company_name TEXT DEFAULT NULL,
        contact_type TEXT DEFAULT "–§–∏–∑–∏—á–µ—Å–∫–æ–µ –ª–∏—Ü–æ",
        FOREIGN KEY (user_id) REFERENCES users(users_id) ON DELETE CASCADE
    )  
''')

conn.commit()

def search_contacts(query):
    cursor.execute("""
        SELECT fname, lname, phone, patronymic, address, company_name
        FROM contacts
        WHERE fname LIKE ? OR lname LIKE ? OR phone LIKE ? OR patronymic LIKE ? OR address LIKE ? OR company_name LIKE ?
    """, (f"%{query}%", f"%{query}%", f"%{query}%", f"%{query}%", f"%{query}%", f"%{query}%"))

    return cursor.fetchall()

def load_contact(contact):
    try:
        if len(contact) < 8:
            print("‚ùå –û—à–∏–±–∫–∞: –∫–æ–Ω—Ç–∞–∫—Ç —Å–æ–¥–µ—Ä–∂–∏—Ç –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–∞–Ω–Ω—ã—Ö", contact)
            return

        contact_id, user_id, fname, lname, patronymic, phone, address, company_name = contact

        print(f"üìû –ü—Ä–æ—Å–º–æ—Ç—Ä –∫–æ–Ω—Ç–∞–∫—Ç–∞: {fname} {lname}")

        contact_info = f"""
        –§–∞–º–∏–ª–∏—è: {lname}
        –ò–º—è: {fname}
        –û—Ç—á–µ—Å—Ç–≤–æ: {patronymic if patronymic else '–ù–µ —É–∫–∞–∑–∞–Ω–æ'}
        –¢–µ–ª–µ—Ñ–æ–Ω: {phone}
        –ê–¥—Ä–µ—Å: {address if address else '–ù–µ —É–∫–∞–∑–∞–Ω–æ'}
        –ö–æ–º–ø–∞–Ω–∏—è: {company_name if company_name else '–ù–µ —É–∫–∞–∑–∞–Ω–æ'}
        """
        print(contact_info)

    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –∫–æ–Ω—Ç–∞–∫—Ç–∞: {e}")

def add_contact(user_id, fname, lname, phone, patronymic=None, address=None, company_name=None):
    try:
        cursor.execute("""
            INSERT INTO contacts (user_id, fname, lname, phone, patronymic, address, company_name)
            VALUES (?, ?, ?, ?, ?, ?, ?)
        """, (user_id, fname.strip(), lname.strip(), phone.strip(),
              patronymic.strip() if patronymic else None,
              address.strip() if address else None,
              company_name.strip() if company_name else None))

        conn.commit()
        print(f"‚úÖ –ö–æ–Ω—Ç–∞–∫—Ç {fname} {lname} —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω!")
    except sqlite3.IntegrityError:
        print(f"‚ö†Ô∏è –ö–æ–Ω—Ç–∞–∫—Ç {fname} {lname} —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç!")
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –∫–æ–Ω—Ç–∞–∫—Ç–∞: {e}")

def register_user(username, password):
    cursor.execute("SELECT * FROM users WHERE username = ?", (username,))
    existing_user = cursor.fetchone()  # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–∞–π–¥–µ–Ω, –æ–Ω –≤–µ—Ä–Ω–µ—Ç —Å—Ç—Ä–æ–∫—É —Å –¥–∞–Ω–Ω—ã–º–∏

    if existing_user:
        print("–û—à–∏–±–∫–∞: –ª–æ–≥–∏–Ω –∑–∞–Ω—è—Ç ")
        return False  # –í–æ–∑–≤—Ä–∞—â–∞–µ–º False, –µ—Å–ª–∏ –ª–æ–≥–∏–Ω –∑–∞–Ω—è—Ç

    cursor.execute("INSERT INTO users (username, password) VALUES (?, ?)", (username, password))
    conn.commit()
    print(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {username} —É—Å–ø–µ—à–Ω–æ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω! ")
    return True

def login_user(username, password):
    cursor.execute("SELECT * FROM users WHERE username = ? AND password = ?", (username, password))
    user = cursor.fetchone()
    return user is not None

def save_contact(user_id, fname, lname, patronymic, phone, address, photo, company_name=None):
    if not lname or not fname or not phone:
        print("–û—à–∏–±–∫–∞: –§–∞–º–∏–ª–∏—è, –∏–º—è –∏ —Ç–µ–ª–µ—Ñ–æ–Ω –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã!")
        return False

    cursor.execute("""
        INSERT INTO contacts (user_id, fname, lname, phone, patronymic, address, photo, company_name) 
        VALUES (?, ?, ?, ?, ?, ?, ?, ?)""",
                   (user_id, fname, lname, phone, patronymic, address, photo, company_name))

    conn.commit()
    print("–ö–æ–Ω—Ç–∞–∫—Ç –¥–æ–±–∞–≤–ª–µ–Ω!")
    return True

def update_contact(contact_id, fname, lname, patronymic, phone, address, photo, company_name):
    try:
        cursor.execute("""
            UPDATE contacts
            SET fname = ?, lname = ?, patronymic = ?, phone = ?, address = ?, photo = ?, 
                company_name = ?
            WHERE contacts_id = ?
        """, (fname, lname, patronymic, phone, address, photo, company_name, contact_id))

        conn.commit()
        return True  # –ï—Å–ª–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ
    except sqlite3.Error as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –∫–æ–Ω—Ç–∞–∫—Ç–∞: {e}")
        return False

def delete_contact_from_db(contact_id):
    try:
        # –ó–∞–ø—Ä–æ—Å –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è –∫–æ–Ω—Ç–∞–∫—Ç–∞ –ø–æ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–º—É –∏–º–µ–Ω–∏ —Å—Ç–æ–ª–±—Ü–∞
        cursor.execute("DELETE FROM contacts WHERE contacts_id = ?", (contact_id,))
        conn.commit()
        return True
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –∫–æ–Ω—Ç–∞–∫—Ç–∞: {e}")
        return False

def get_contacts(user_id):
    cursor.execute("SELECT * FROM contacts WHERE user_id = ?", (user_id,))
    return cursor.fetchall()

def close_db():
    conn.close()

